name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    defaults:
      run:
        working-directory: ./server # Set working directory to the server folder

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json # Path to package-lock.json
    - name: Install dependencies
      run: npm ci
    - name: Run tests
      run: npm test
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=SHA888
          -Dsonar.projectKey=SHA888_AIDataVault
          -Dsonar.sources=src
        projectBaseDir: server
    # Add build command if you have one, e.g., npm run build
    # Add test command, e.g., npm test
    # Example: Check if the server starts (very basic test)
    - name: Check if server starts (requires DB to be mocked or skipped for CI)
      run: node src/index.js & APP_PID=$! && sleep 5 && kill $APP_PID || exit 1
      # This server start check is very basic and will likely fail if the DB isn't available.
      # For a real CI, you'd mock the DB or use a test DB service.
      # For now, we might comment this out or adjust it.
